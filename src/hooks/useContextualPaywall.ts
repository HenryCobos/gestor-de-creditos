import { useState, useCallback } from 'react';
import { usePremium } from './usePremium';
import { useApp } from '../context/AppContext';
import { isFeatureAllowed, FeatureKey } from '../utils/featureGating';

interface PaywallContext {
  title: string;
  message: string;
  icon: string;
  featureName: string;
  currentUsage?: number;
  limit?: number;
}

export function useContextualPaywall() {
  const [visible, setVisible] = useState(false);
  const [context, setContext] = useState<PaywallContext | null>(null);
  const premium = usePremium();
  const { state } = useApp();

  const showPaywall = useCallback(async (feature: FeatureKey, customContext?: Partial<PaywallContext>) => {
    // Verificar estado Premium actualizado antes de mostrar paywall
    console.log('üîç Verificando estado Premium ULTRA-DETALLADO antes de mostrar paywall...');
    console.log('üîç Feature solicitado:', feature);
    
    await premium.updatePremiumState();

    // Verificar nuevamente despu√©s de la actualizaci√≥n
    const currentPremiumStatus = premium.isPremium;
    console.log('üìä Estado Premium actual:', currentPremiumStatus);

    // Verificar tambi√©n el customerInfo directamente
    const customerInfo = premium.customerInfo;
    const hasActiveSubscription = customerInfo?.entitlements?.active?.["pro"] != null;
    console.log('üîç Verificaci√≥n adicional - hasActiveSubscription:', hasActiveSubscription);
    console.log('üîç CustomerInfo completo:', {
      customerInfo: !!customerInfo,
      entitlements: customerInfo?.entitlements,
      activeEntitlements: customerInfo?.entitlements?.active,
      activeSubscriptions: customerInfo?.activeSubscriptions
    });

    // Verificaci√≥n adicional: si no detecta suscripci√≥n, forzar una verificaci√≥n m√°s
    if (!currentPremiumStatus && !hasActiveSubscription) {
      console.log('üîÑ No se detect√≥ suscripci√≥n, forzando verificaci√≥n adicional...');
      await premium.updatePremiumState();
      
      // Verificar una vez m√°s
      const finalCustomerInfo = premium.customerInfo;
      const finalHasActiveSubscription = finalCustomerInfo?.entitlements?.active?.["pro"] != null;
      
      console.log('üîç Verificaci√≥n final:', {
        finalHasActiveSubscription,
        finalCustomerInfo: !!finalCustomerInfo,
        finalEntitlements: finalCustomerInfo?.entitlements?.active
      });
      
      if (finalHasActiveSubscription) {
        console.log('‚úÖ Suscripci√≥n detectada en verificaci√≥n adicional');
        return false;
      }
    }

    const gate = isFeatureAllowed(feature, {
      clientesCount: state.clientes.length,
      prestamosActivosCount: state.prestamos.filter(p => p.estado === 'activo').length,
      isPremium: currentPremiumStatus || hasActiveSubscription,
    });

    console.log('üîç Gate result:', gate);

    // No mostrar paywall si es premium (verificaci√≥n doble)
    if (currentPremiumStatus || hasActiveSubscription) {
      console.log('‚úÖ Usuario ya es Premium - no mostrando paywall');
      return false;
    }

    const defaultContexts: Record<FeatureKey, PaywallContext> = {
      create_cliente: {
        title: gate.allowed ? '¬°Casi alcanzas el l√≠mite de clientes!' : '¬°L√≠mite de clientes alcanzado!',
        message: gate.allowed 
          ? `Has usado ${state.clientes.length} de 10 clientes. Mejora a Premium para clientes ilimitados y no perder acceso a tus datos.`
          : `Has alcanzado el l√≠mite de 10 clientes. Mejora a Premium para clientes ilimitados y no perder acceso a tus datos.`,
        icon: 'üë•',
        featureName: 'Clientes',
        currentUsage: state.clientes.length,
        limit: 10,
      },
      create_prestamo: {
        title: gate.allowed ? '¬°Casi alcanzas el l√≠mite de pr√©stamos!' : '¬°L√≠mite de pr√©stamos alcanzado!',
        message: gate.allowed 
          ? `Has usado ${state.prestamos.filter(p => p.estado === 'activo').length} de 10 pr√©stamos activos. Mejora a Premium para pr√©stamos ilimitados y no perder acceso a tus datos.`
          : `Has alcanzado el l√≠mite de 10 pr√©stamos activos. Mejora a Premium para pr√©stamos ilimitados y no perder acceso a tus datos.`,
        icon: 'üí∞',
        featureName: 'Pr√©stamos Activos',
        currentUsage: state.prestamos.filter(p => p.estado === 'activo').length,
        limit: 10,
      },
      reportes_basicos: {
        title: 'Reportes b√°sicos incluidos',
        message: 'Los reportes b√°sicos est√°n incluidos en la versi√≥n gratuita.',
        icon: 'üìä',
        featureName: 'Reportes B√°sicos',
      },
      reportes_avanzados: {
        title: 'Reportes avanzados son Premium',
        message: 'Desbloquea reportes avanzados con gr√°ficos, an√°lisis detallados y exportaci√≥n a PDF/Excel.',
        icon: 'üìà',
        featureName: 'Reportes Avanzados',
      },
      backup_auto: {
        title: 'Exportaci√≥n de reportes incluida',
        message: 'La exportaci√≥n de reportes en PDF est√° incluida en todas las versiones.',
        icon: 'üìÑ',
        featureName: 'Exportaci√≥n de Reportes',
      },
      notificaciones_personalizadas: {
        title: 'Notificaciones personalizadas son Premium',
        message: 'Personaliza horarios y mensajes de notificaciones.',
        icon: 'üîî',
        featureName: 'Notificaciones Personalizadas',
      },
      analisis_riesgo: {
        title: 'An√°lisis de riesgo es Premium',
        message: 'Eval√∫a el riesgo crediticio de tus clientes con herramientas avanzadas.',
        icon: 'üìà',
        featureName: 'An√°lisis de Riesgo',
      },
      integracion_calendario: {
        title: 'Integraci√≥n con calendario es Premium',
        message: 'Sincroniza con Google Calendar y otros calendarios.',
        icon: 'üìÖ',
        featureName: 'Integraci√≥n con Calendario',
      },
      exportacion_avanzada: {
        title: 'Exportaci√≥n avanzada es Premium',
        message: 'Exporta datos en PDF, Excel y otros formatos.',
        icon: 'üì§',
        featureName: 'Exportaci√≥n Avanzada',
      },
      soporte_prioritario: {
        title: 'Soporte prioritario es Premium',
        message: 'Recibe soporte prioritario y respuesta r√°pida.',
        icon: 'üí¨',
        featureName: 'Soporte Prioritario',
      },
    };

    const paywallContext = {
      ...defaultContexts[feature],
      ...customContext,
    };

    setContext(paywallContext);
    setVisible(true);
    return true;
  }, [state.clientes.length, state.prestamos, premium.isPremium]);

  const hidePaywall = useCallback(() => {
    setVisible(false);
    setContext(null);
  }, []);

  const handleSubscribe = useCallback(async (selected: any) => {
    // Acepta tanto paquetes de RevenueCat como planes locales (PricingPlan)
    let packageToPurchase = selected;

    // Si viene de SimplePaywall (PricingPlan), mapear al paquete de RevenueCat
    if (selected && typeof selected === 'object' && 'revenueCatId' in selected && !('product' in selected)) {
      const revenueCatId = (selected as any).revenueCatId;
      const found = (premium.packages || []).find((p: any) => p?.identifier === revenueCatId);
      if (found) {
        packageToPurchase = found;
      } else {
        console.warn('Paquete de RevenueCat no encontrado para', revenueCatId);
      }
    }

    console.log('üõí Iniciando compra desde paywall...');
    let shouldClose = false;
    
    try {
      const result = await premium.subscribe(packageToPurchase);
      
      if (result.success) {
        console.log('‚úÖ Compra exitosa - marcando para cerrar paywall');
        shouldClose = true;
      } else {
        console.log('‚ùå Error en compra:', result.error);
        
        // Si el error es "ya suscrito", tambi√©n cerrar
        const errorMsg = (result.error?.message || '').toLowerCase();
        if (errorMsg.includes('already') || errorMsg.includes('suscrito') || errorMsg.includes('subscribed') || errorMsg.includes('purchased') || errorMsg.includes('cancelad')) {
          console.log('‚úÖ Usuario ya suscrito detectado - marcando para cerrar paywall');
          shouldClose = true;
        }
      }
      
      return result;
    } catch (error: any) {
      console.log('‚ùå Excepci√≥n en compra:', error);
      // Si hay cualquier error relacionado con "ya comprado", cerrar igual
      const errorMsg = (error?.message || '').toLowerCase();
      if (errorMsg.includes('already') || errorMsg.includes('suscrito') || errorMsg.includes('subscribed') || errorMsg.includes('purchased')) {
        console.log('‚úÖ Error de ya suscrito capturado - marcando para cerrar');
        shouldClose = true;
      }
      return { success: false, error };
    } finally {
      // SIEMPRE actualizar el estado y potencialmente cerrar el paywall
      console.log('üîÑ Actualizando estado Premium final...');
      await premium.updatePremiumState();
      
      // Esperar para asegurar que el estado se propague
      await new Promise(resolve => setTimeout(resolve, 800));
      
      // Verificar si debe cerrar
      if (shouldClose) {
        console.log('‚úÖ CERRANDO PAYWALL DEFINITIVAMENTE');
        hidePaywall();
      } else {
        // Verificar si hay suscripci√≥n activa de todas formas
        const customerInfo = premium.customerInfo;
        const hasActiveSubscription = customerInfo?.entitlements?.active?.["pro"] != null;
        if (hasActiveSubscription) {
          console.log('‚úÖ Suscripci√≥n activa detectada en verificaci√≥n final - CERRANDO');
          hidePaywall();
        }
      }
    }
  }, [premium, hidePaywall]);

  const handleStartTrial = useCallback(async () => {
    console.log('üéÅ Iniciando trial desde paywall...');
    const result = await premium.startTrial();
    
    if (result.success) {
      console.log('‚úÖ Trial iniciado exitosamente - cerrando paywall');
      // Peque√±o delay para que el usuario vea el feedback
      setTimeout(() => {
        hidePaywall();
      }, 500);
    } else {
      console.log('‚ùå Error iniciando trial:', result.error);
    }
    
    return result;
  }, [premium, hidePaywall]);

  const handleRestore = useCallback(async () => {
    console.log('üîÑ Iniciando restauraci√≥n AGRESIVA de compras...');
    
    try {
      const result = await premium.restore();
      console.log('üîÑ Resultado de restauraci√≥n:', result);
      
      return result;
    } catch (error: any) {
      console.log('‚ùå Error en restauraci√≥n:', error);
      return { success: false, error };
    } finally {
      // SIEMPRE actualizar el estado Premium al final, sin importar el resultado
      console.log('üîÑ Actualizando estado Premium despu√©s de restaurar...');
      await premium.updatePremiumState();
      
      // Esperar m√°s tiempo para asegurar que el estado se propague
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Segunda actualizaci√≥n para asegurar
      await premium.updatePremiumState();
      
      // Esperar un poco m√°s
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Verificar el customerInfo actual directamente
      const customerInfo = premium.customerInfo;
      const hasActiveSubscription = customerInfo?.entitlements?.active?.["pro"] != null;
      
      console.log('üîç Verificaci√≥n FINAL despu√©s de restaurar:', {
        hasActiveSubscription,
        entitlements: Object.keys(customerInfo?.entitlements?.active || {}),
        isPremium: premium.isPremium,
      });
      
      // Si tiene suscripci√≥n activa, cerrar el paywall DEFINITIVAMENTE
      if (hasActiveSubscription || premium.isPremium) {
        console.log('‚úÖ‚úÖ‚úÖ SUSCRIPCI√ìN ACTIVA CONFIRMADA - CERRANDO PAYWALL DEFINITIVAMENTE');
        hidePaywall();
      } else {
        console.log('‚ÑπÔ∏è No se encontr√≥ suscripci√≥n activa para restaurar - el paywall permanece abierto');
      }
    }
  }, [premium, hidePaywall]);

  const handleRetry = useCallback(async () => {
    console.log('üîÑ Reintentando cargar productos...');
    try {
      // Recargar ofertas y estado para obtener los productos nuevamente
      if ((premium as any).reloadOfferings) {
        await (premium as any).reloadOfferings();
      }
      await premium.updatePremiumState();
    } catch (error) {
      console.error('‚ùå Error al reintentar:', error);
    }
  }, [premium]);

  return {
    visible,
    context,
    showPaywall,
    hidePaywall,
    handleSubscribe,
    handleStartTrial,
    handleRestore,
    handleRetry,
    loading: premium.loading,
    error: premium.error,
    packages: premium.packages,
  };
}
